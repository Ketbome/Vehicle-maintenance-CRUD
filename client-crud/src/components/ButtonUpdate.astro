---
import type { Usuario } from "../types";

interface ButtonProps {
  id: number;
  precio: number;
}

// Obtener las props con tipos
const { id, precio } = Astro.props as ButtonProps;
---
<a class="updateprecio flex-row justify-center texte-white cursor-pointer hover:bg-slate-700 focus:ring-4 focus:outline-none focus:ring-[#1da1f2]/50 font-medium rounded-lg px-5 py-2.5 text-center inline-flex items-center dark:focus:ring-[#1da1f2]/55 mr-2 mb-2 hover:shadow-lg transition-all duration-200 ease-in-out hover:scale-110 scale-90 gap-x-2 opacity-70 hover:opacity-100" data-id={id}>
    <slot name="before" />
    <slot />
    <slot name="after" />
</a>

<!-- Modal -->
<div id="cambioPrecio" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
  <div class="flex items-center justify-center min-h-screen">
      <div class="bg-gray-900 p-5 rounded-lg shadow-lg w-4/6 md:w-2/5">
          <h2 class="text-lg font-bold">Cambiar Due√±o</h2>
          <form id="formCambioPrecio" data-id={id}>
              <div class="flex flex-col pb-5">
                <label for="precio" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Ingresa el nuevo valor:</label>
                <input type="number" value="12000000" id="precio" name="precio" min="0" class="block w-full px-4 py-2 mt-2 text-gray-900 bg-white border border-gray-300 rounded-md dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring" required />
              </div>
              <div class="flex flex-row justify-between">
                <button type="submit" class="confirm-precio bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" data-id={id}>
                    Cambiar
                </button>
                <button type="button"  class="cancel-precio bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded" data-id={id}>
                    Cancelar
                </button>
              </div>
          </form>
      </div>
  </div>
</div>

<script>
 function toggleModal(modalId: string) {
    const modal = document.getElementById(modalId);
    if (modal) {
      modal.classList.toggle('hidden');
    }
  }


  document.addEventListener('click', (event) => {
      const target = event.target as HTMLElement;
      if (target.classList.contains('updateprecio')) {
        const autoId = target.getAttribute('data-id');
        const form = document.getElementById('formCambioPrecio') as HTMLFormElement;
        if (form && autoId) {
          form.setAttribute('data-id', autoId);
          toggleModal('cambioPrecio');
        }
      }
      else if (target.classList.contains('cancel-precio')) {
        toggleModal('cambioPrecio');
      }
      else if (target.classList.contains('confirm-precio')) {
        const form: HTMLFormElement | null = document.getElementById('formCambioPrecio') as HTMLFormElement;
        const autoId: string | null = form?.getAttribute('data-id');        
        if (form) {
          actualizarPrecio(parseInt(autoId!));
        }
      }
    });

  const formCambioPrecio: HTMLFormElement | null = document.getElementById('formCambioPrecio') as HTMLFormElement;

  async function actualizarPrecio(id: number) {
      const dinero = formCambioPrecio?.precio.value;
      try {
        const respuesta = await fetch(`http://127.0.0.1:8000/api/vehiculos/${id}`, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ precio: dinero }),
        });
        if (!respuesta.ok) {
          throw new Error("Error al cambiar precio del auto");
        }
  
        alert("Se ha cambiado el precio del auto exitosamente");
        
        location.reload();
      } catch (error) {
        console.error("Hubo un error al Cambiar precio:", error);
      }
    };

</script>
